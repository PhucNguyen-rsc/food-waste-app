// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../client" // Keep generated client one level up, outside src
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(UNASSIGNED)
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Business specific fields
  businessName    String?
  businessAddress String?
  businessPhone   String?

  // Consumer specific fields
  deliveryAddress String?

  // Courier specific fields
  isAvailable     Boolean @default(false)
  currentLocation String?
  vehicleType     String?

  // Relations
  foodItems      FoodItem[] @relation("BusinessFoodItems")
  orders         Order[]    @relation("ConsumerOrders")
  deliveries     Order[]    @relation("CourierDeliveries")
  businessOrders Order[]    @relation("BusinessOrders")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FoodItem {
  id            String       @id @default(cuid())
  name          String
  description   String
  price         Float
  originalPrice Float
  quantity      Int
  expiryDate    DateTime
  images        String[]
  category      FoodCategory
  status        FoodStatus   @default(AVAILABLE)
  businessId    String
  business      User         @relation("BusinessFoodItems", fields: [businessId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orderItems    OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  consumerId      String
  consumer        User        @relation("ConsumerOrders", fields: [consumerId], references: [id])
  businessId      String
  business        User        @relation("BusinessOrders", fields: [businessId], references: [id])
  courierId       String?
  courier         User?       @relation("CourierDeliveries", fields: [courierId], references: [id])
  items           OrderItem[]
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  deliveryAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  foodItemId String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  quantity   Int
  price      Float
}

enum UserRole {
  UNASSIGNED
  BUSINESS
  CONSUMER
  COURIER
  ADMIN
}

enum FoodCategory {
  MEAT
  DAIRY
  PRODUCE
  BAKERY
  PREPARED
  OTHER
}

enum FoodStatus {
  AVAILABLE
  RESERVED
  SOLD
  EXPIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  PICKED_UP
  DELIVERED
  CANCELLED
}
