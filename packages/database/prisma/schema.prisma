// packages/database/prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../client" // generated client goes one level up
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")        // ✅ use the working variable from your .env
  directUrl  = env("DATABASE_URL")        // ✅ avoid crash due to missing POSTGRES_URL_NON_POOLING
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole  @default(UNASSIGNED)
  accounts        Account[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Business specific fields
  businessName    String?
  businessAddress String?
  businessPhone   String?

  // Consumer specific fields
  deliveryAddress String?
  paymentMethods  PaymentMethod[]

  // Courier specific fields
  isAvailable     Boolean   @default(false)
  currentLocation String?
  vehicleType     String?

  // Relations
  foodItems       FoodItem[]  @relation("BusinessFoodItems")
  orders          Order[]     @relation("ConsumerOrders")
  deliveries      Order[]     @relation("CourierDeliveries")
  businessOrders  Order[]     @relation("BusinessOrders")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FoodItem {
  id                String      @id @default(cuid())
  name              String
  description       String
  price             Float
  originalPrice     Float
  quantity          Int
  expiryDate        DateTime
  images            String[]
  category          FoodCategory
  status            FoodStatus  @default(AVAILABLE)
  businessId        String
  business          User        @relation("BusinessFoodItems", fields: [businessId], references: [id])
  discountPercentage Float?
  discountThreshold Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orderItems        OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  consumerId      String
  consumer        User        @relation("ConsumerOrders", fields: [consumerId], references: [id])
  businessId      String
  business        User        @relation("BusinessOrders", fields: [businessId], references: [id])
  courierId       String?
  courier         User?       @relation("CourierDeliveries", fields: [courierId], references: [id])
  items           OrderItem[]
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  deliveryAddress String
  completedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  foodItemId String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  quantity   Int
  price      Float
}

model PaymentMethod {
  id           String         @id @default(cuid())
  type         PaymentType
  cardNumber   String?        // Last 4 digits only for display
  cardBrand    String?        // VISA, MasterCard, etc.
  expiryDate   String?        // MM/YY format
  isDefault    Boolean        @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum UserRole {
  UNASSIGNED
  BUSINESS
  CONSUMER
  COURIER
  ADMIN
}

enum FoodCategory {
  MEAT
  DAIRY
  PRODUCE
  BAKERY
  PREPARED
  OTHER
}

enum FoodStatus {
  AVAILABLE
  RESERVED
  SOLD
  EXPIRED
}

enum OrderStatus {
  PENDING           // Initial state when order is created
  BUSINESS_CONFIRMED // Business has confirmed the order
  CONFIRMED         // Courier has accepted the order
  PREPARING         // Business is preparing the order
  READY            // Order is ready for pickup
  PICKED_UP        // Courier has picked up the order
  COURIER_DELIVERED // Courier has marked as delivered, waiting for consumer confirmation
  DELIVERED        // Consumer has confirmed delivery
  CANCELLED        // Order was cancelled
}

enum PaymentType {
  PAYPAL
  MASTERCARD
  VISA
}
